open import lib

concat-map-singleton : ∀ {A : Set}(l : 𝕃 A) → concat (map [_] l ) ≡ l
concat-map-singleton [] = refl
concat-map-singleton (x :: l) rewrite concat-map-singleton l = refl

length-filter' : ∀ {A  : Set} (l : 𝕃  A) (p  :  A → 𝔹) → length (filter p l) ≤ length l ≡ tt
length-filter' [] p = refl
length-filter' (x :: l) p with p x
length-filter' (x :: l) p | tt = length-filter' l p
length-filter' (x :: l) p | ff = {!!}

filter-idempotent : ∀ {A : Set} (l : 𝕃 A) (p : A → 𝔹 ) → filter p (filter p l ) ≡ filter p l
filter-idempotent [] p = refl
filter-idempotent (x :: l ) p with keep ( p x )
filter-idempotent (x :: l) p | tt , q rewrite q | q | filter-idempotent l p  = refl
filter-idempotent (x :: l) p | ff , q rewrite q = filter-idempotent l p

div2 : ℕ  →  ℕ
div2 zero = zero
div2 ( suc zero ) = zero
div2 ( suc  (suc x) ) = suc (div2 x)

2*div2 : ∀ x → is-even x ≡ tt → 2 * div2 x ≡ x
2*div2 zero p = refl
2*div2 ( suc (zero ) ) ()
2*div2 ( suc (suc x) )  p rewrite (+suc ( div2 x ) ( div2 x + zero ) ) = {!!}

example-vector : 𝕍 ℕ 4
example-vector = (1 :: 2 :: 3 :: 10 :: []) 
